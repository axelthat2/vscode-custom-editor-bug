{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/editorProvider.ts"],
  "sourcesContent": ["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport type * as vscode from \"vscode\"\nimport { EditorProvider } from \"./editorProvider\"\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(EditorProvider.register(context))\n}\n", "import * as vscode from 'vscode';\n\nfunction getNonce() {\n  let text = '';\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 32; i += 1) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n\nexport class EditorProvider implements vscode.CustomTextEditorProvider {\n  public static register(context: vscode.ExtensionContext) {\n    const provider = new EditorProvider(context);\n    const providerRegistration = vscode.window.registerCustomEditorProvider(\n      EditorProvider.viewType,\n      provider\n    );\n    return providerRegistration;\n  }\n\n  private static readonly viewType = 'flame.editor';\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(private readonly context: vscode.ExtensionContext) {}\n\n  async resolveCustomTextEditor(\n    document: vscode.TextDocument,\n    webviewPanel: vscode.WebviewPanel,\n    token: vscode.CancellationToken\n  ): Promise<void> {\n    await webviewPanel.webview.postMessage({\n      type: 'update',\n    });\n    // eslint-disable-next-line no-param-reassign\n    webviewPanel.webview.options = {\n      enableScripts: true,\n    };\n    // eslint-disable-next-line no-param-reassign\n    webviewPanel.webview.html = this.getHtml(webviewPanel.webview);\n  }\n\n  private getHtml(webview: vscode.Webview) {\n    const scriptUri = webview\n      .asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'index.js'))\n      .toString();\n    const scriptUri2 = webview\n      .asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'vendor.js'))\n      .toString();\n\n    const nonce = getNonce();\n\n    return /* html */ `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <!--\n  Use a content security policy to only allow loading images from https or from our extension directory,\n  and only allow scripts that have a specific nonce.\n  -->\n  <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src ${webview.cspSource}; style-src ${webview.cspSource}; script-src 'nonce-${nonce}';\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <script type=\"module\" nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n  <link rel=\"modulepreload\" nonce=\"${nonce}\" href=\"${scriptUri2}\">\n</head>\n<body>\n  <div id=\"app\"></div>\n</body>\n</html>`;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;ACAA,aAAwB;AAExB,oBAAoB;AAClB,MAAI,OAAO;AACX,QAAM,WAAW;AACjB,WAAS,IAAI,GAAG,IAAI,IAAI,KAAK,GAAG;AAC9B,YAAQ,SAAS,OAAO,KAAK,MAAM,KAAK,WAAW,SAAS;AAAA;AAE9D,SAAO;AAAA;AAGF,4BAAgE;AAAA,EAarE,YAA6B,SAAkC;AAAlC;AAAA;AAAA,SAZf,SAAS,SAAkC;AACvD,UAAM,WAAW,IAAI,gBAAe;AACpC,UAAM,uBAAuB,AAAO,cAAO,6BACzC,gBAAe,UACf;AAEF,WAAO;AAAA;AAAA,QAQH,wBACJ,UACA,cACA,OACe;AACf,UAAM,aAAa,QAAQ,YAAY;AAAA,MACrC,MAAM;AAAA;AAGR,iBAAa,QAAQ,UAAU;AAAA,MAC7B,eAAe;AAAA;AAGjB,iBAAa,QAAQ,OAAO,KAAK,QAAQ,aAAa;AAAA;AAAA,EAGhD,QAAQ,SAAyB;AACvC,UAAM,YAAY,QACf,aAAa,AAAO,WAAI,SAAS,KAAK,QAAQ,cAAc,QAAQ,aACpE;AACH,UAAM,aAAa,QAChB,aAAa,AAAO,WAAI,SAAS,KAAK,QAAQ,cAAc,QAAQ,cACpE;AAEH,UAAM,QAAQ;AAEd,WAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFAS8D,QAAQ,wBAAwB,QAAQ,gCAAgC;AAAA;AAAA,iCAE3H,eAAe;AAAA,qCACX,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AArD9C;AAUmB,AAVnB,eAUmB,WAAW;;;ADd9B,kBAAkB,SAAkC;AACzD,UAAQ,cAAc,KAAK,eAAe,SAAS;AAAA;",
  "names": []
}
